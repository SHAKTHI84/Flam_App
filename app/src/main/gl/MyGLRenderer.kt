package com.example.myapplication.gl\n\nimport android.opengl.GLES20\nimport android.opengl.GLSurfaceView\nimport java.nio.ByteBuffer\nimport java.nio.ByteOrder\nimport java.nio.FloatBuffer\nimport javax.microedition.khronos.egl.EGLConfig\nimport javax.microedition.khronos.opengles.GL10\n\nclass MyGLRenderer : GLSurfaceView.Renderer {\n\n    private var program = 0\n    private var positionHandle = 0\n    private var texCoordHandle = 0\n    private var textureHandle = 0\n    private var textureId = 0\n\n    private val vertices = floatArrayOf(\n        -1.0f, -1.0f,  // bottom left\n         1.0f, -1.0f,  // bottom right\n        -1.0f,  1.0f,  // top left\n         1.0f,  1.0f   // top right\n    )\n\n    private val texCoords = floatArrayOf(\n        0.0f, 1.0f,  // top left\n        1.0f, 1.0f,  // top right\n        0.0f, 0.0f,  // bottom left\n        1.0f, 0.0f   // bottom right\n    )\n\n    private val vertexBuffer: FloatBuffer = ByteBuffer.allocateDirect(vertices.size * 4).run {\n        order(ByteOrder.nativeOrder())\n        asFloatBuffer().apply { put(vertices) }\n    }\n\n    private val texCoordBuffer: FloatBuffer = ByteBuffer.allocateDirect(texCoords.size * 4).run {\n        order(ByteOrder.nativeOrder())\n        asFloatBuffer().apply { put(texCoords) }\n    }\n\n    private val vertexShaderCode = \"\"\"\n        attribute vec4 aPosition;\n        attribute vec2 aTexCoord;\n        varying vec2 vTexCoord;\n        void main() {\n            gl_Position = aPosition;\n            vTexCoord = aTexCoord;\n        }\n    \"\"\"\n\n    private val fragmentShaderCode = \"\"\"\n        precision mediump float;\n        uniform sampler2D uTexture;\n        varying vec2 vTexCoord;\n        void main() {\n            gl_FragColor = texture2D(uTexture, vTexCoord);\n        }\n    \"\"\"\n\n    override fun onSurfaceCreated(gl: GL10?, config: EGLConfig?) {\n        GLES20.glClearColor(0.0f, 0.0f, 0.0f, 1.0f)\n\n        val vertexShader = loadShader(GLES20.GL_VERTEX_SHADER, vertexShaderCode)\n        val fragmentShader = loadShader(GLES20.GL_FRAGMENT_SHADER, fragmentShaderCode)\n\n        program = GLES20.glCreateProgram().also {\n            GLES20.glAttachShader(it, vertexShader)\n            GLES20.glAttachShader(it, fragmentShader)\n            GLES20.glLinkProgram(it)\n        }\n\n        textureId = createTexture()\n    }\n\n    override fun onDrawFrame(gl: GL10?) {\n        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT)\n        GLES20.glUseProgram(program)\n\n        positionHandle = GLES20.glGetAttribLocation(program, \"aPosition\").also {\n            GLES20.glEnableVertexAttribArray(it)\n            GLES20.glVertexAttribPointer(it, 2, GLES20.GL_FLOAT, false, 0, vertexBuffer)\n        }\n\n        texCoordHandle = GLES20.glGetAttribLocation(program, \"aTexCoord\").also {\n            GLES20.glEnableVertexAttribArray(it)\n            GLES20.glVertexAttribPointer(it, 2, GLES20.GL_FLOAT, false, 0, texCoordBuffer)\n        }\n\n        textureHandle = GLES20.glGetUniformLocation(program, \"uTexture\").also {\n            GLES20.glActiveTexture(GLES20.GL_TEXTURE0)\n            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textureId)\n            GLES20.glUniform1i(it, 0)\n        }\n\n        GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4)\n\n        GLES20.glDisableVertexAttribArray(positionHandle)\n        GLES20.glDisableVertexAttribArray(texCoordHandle)\n    }\n\n    override fun onSurfaceChanged(gl: GL10?, width: Int, height: Int) {\n        GLES20.glViewport(0, 0, width, height)\n    }\n\n    private fun loadShader(type: Int, shaderCode: String): Int {\n        return GLES20.glCreateShader(type).also {\ shader ->\n            GLES20.glShaderSource(shader, shaderCode)\n            GLES20.glCompileShader(shader)\n        }\n    }\n\n    private fun createTexture(): Int {\n        val textures = IntArray(1)\n        GLES20.glGenTextures(1, textures, 0)\n        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textures[0])\n        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR)\n        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR)\n        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE)\n        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE)\n        return textures[0]\n    }\n\n    fun updateTexture(pixels: ByteBuffer, width: Int, height: Int) {\n        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textureId)\n        GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D, 0, GLES20.GL_RGBA, width, height, 0, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, pixels)\n    }\n}